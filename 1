
#include <iostream>
#include <locale.h>
#include <cstdio> 
#include <stdlib.h>
#include <stdio.h>
#include <cmath>
#include <sstream>
#include <string>

using byte = unsigned char;


byte update_gamma(unsigned short& Gamma)
{
    unsigned char gammai;
    gammai = (Gamma >> 8) ^ (Gamma & 0xff);
    return gammai;
}

std::string charToHexString(byte ch)
{
    std::ostringstream oss;
    oss << std::hex << std::uppercase << (int)ch;
    return oss.str();
}

std::string charFromHexString(byte ch)
{
    std::ostringstream oss;
    oss << std::hex << std::uppercase << (int)ch;
    return oss.str();
}

//Функция для шифрования данных

std::string encrypt(const std::string message, int key)
{
    srand(key);
    unsigned short Gamma;
    const char * str = message.c_str();
    byte gammai = 0;
    byte buff1 = 0;
    byte buff2 = 0;
    std::string result;
    for (int i = 1; i <= strlen(str) + 1 ; i++)
    {
        Gamma = rand();
        gammai = update_gamma(Gamma);
        memcpy(&buff1, str + (i - 1), 1*sizeof(byte));
        buff2 = buff1^gammai;
        buff1 = buff2;
        buff1 >>= 4;
        buff2 <<= 4;
        buff2 |= buff1;
        result += charToHexString(buff2);
    }
    return result;
}

//Функция для расшифровывания данных
std::string decrypt(const std::string message, int key)
{
    const char * str = message.c_str();
    srand(key);
    unsigned short Gamma;
    byte gammai = 0;
    byte buff1 = 0;
    byte buff2 = 0;
    std::string result;
    for (int i = 1; i <= strlen(str); i++)
    {
        Gamma = rand();
        gammai = update_gamma(Gamma);
        memcpy(&buff1, str + (i - 1), 1);
        buff2 = buff1;
        buff1 <<= 4;
        buff2 >>= 4;
        buff2 |= buff1;
        buff2 = buff2^gammai;
        result += charToHexString(buff2);
    }
    //std::cout << result << std::endl;
    //char *str = "\x00";
   
    return result;
}

int main()
{
    std::string strEnt;
    std::cin >> strEnt;
    
    char l[1];
    int key = 3;
    std::string value = encrypt(strEnt, key);
    std::cout << value << std::endl;
    std::string result = decrypt(value, key);
    std::cout << result << std::endl;
    system("pause");
}
